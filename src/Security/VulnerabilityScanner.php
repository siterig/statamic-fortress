<?php

namespace Siterig\Fortress\Security;

use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;
use Composer\Factory;
use Composer\IO\NullIO;

class VulnerabilityScanner
{
    protected $cacheTime = 3600; // 1 hour
    protected $securityAdvisoriesUrl = 'https://packagist.org/api/security-advisories/';

    public function scan()
    {
        $composer = Factory::create(new NullIO(), base_path('composer.json'));
        $packages = $composer->getPackage()->getRequires();
        
        $vulnerabilities = [];
        
        foreach ($packages as $package) {
            $packageName = $package->getTarget();
            $vulnerabilities = array_merge(
                $vulnerabilities,
                $this->checkPackage($packageName)
            );
        }

        return $vulnerabilities;
    }

    protected function checkPackage($packageName)
    {
        $cacheKey = "fortress:vulnerabilities:{$packageName}";
        
        return Cache::remember($cacheKey, $this->cacheTime, function () use ($packageName) {
            try {
                $response = Http::get($this->securityAdvisoriesUrl, [
                    'packages' => [$packageName]
                ]);

                if ($response->successful()) {
                    $advisories = $response->json();
                    
                    if (!empty($advisories)) {
                        $this->logVulnerability($packageName, $advisories);
                        return $advisories;
                    }
                }
            } catch (\Exception $e) {
                Log::channel('fortress')->error("Error checking vulnerabilities for {$packageName}: " . $e->getMessage());
            }

            return [];
        });
    }

    protected function logVulnerability($packageName, $advisories)
    {
        Log::channel('fortress')->warning('Package Vulnerability Found', [
            'package' => $packageName,
            'advisories' => $advisories,
            'timestamp' => now()
        ]);
    }

    public function getVulnerabilitySummary()
    {
        $vulnerabilities = $this->scan();
        
        return [
            'total' => count($vulnerabilities),
            'critical' => $this->countBySeverity($vulnerabilities, 'critical'),
            'high' => $this->countBySeverity($vulnerabilities, 'high'),
            'medium' => $this->countBySeverity($vulnerabilities, 'medium'),
            'low' => $this->countBySeverity($vulnerabilities, 'low'),
        ];
    }

    protected function countBySeverity($vulnerabilities, $severity)
    {
        return count(array_filter($vulnerabilities, function ($vuln) use ($severity) {
            return strtolower($vuln['severity'] ?? '') === $severity;
        }));
    }
} 
